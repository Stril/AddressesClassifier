<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NDbfReaderEx</name>
    </assembly>
    <members>
        <member name="T:NDbfReaderEx.BooleanColumn">
            <summary>
            Represents a <see cref="T:System.Boolean"/> column.
            </summary>
        </member>
        <member name="T:NDbfReaderEx.Column`1">
            <summary>
            The base class for all column types.
            </summary>
            <typeparam name="T">The type of the column value.</typeparam>
        </member>
        <member name="T:NDbfReaderEx.Column">
            <summary>
            The base class of all column types. Intended for internal usage. To define a custom column type, derive from the generic subclass <see cref="T:NDbfReaderEx.Column`1"/>.
            </summary>
        </member>
        <member name="T:NDbfReaderEx.IColumn">
            <summary>
            Represents a dBASE/Clipper column.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.IColumn.name">
            <summary>
            Gets the column name.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.IColumn.type">
            <summary>
            Gets the <c>CLR</c> type of a column value.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.IColumn.size">
            <summary>
            Gets the column size in bytes/characters.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.IColumn.dec">
            <summary>
            Gets the number of decimal places in bytes/characters.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.IColumn.dbfType">
            <summary>
            Gets the <c>DBF</c> type of a column value.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.IColumn.displayWidth">
            <summary>
            Gets the width to display of a column value.
            If column type is memo, returns 0 because it is variable width.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.IColumn.leftSideDisplay">
            <summary>
            Better side to display of a column value.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.Column.#ctor(System.String,NDbfReaderEx.NativeColumnType,System.Int32,System.Int16,System.Int16,System.Text.Encoding)">
            <summary>
            Initializes a new instance with the specified name, offset and size.
            </summary>
            <param name="name">The colum name.</param>
            <param name="offset">The column offset in a row in bytes.</param>
            <param name="size">The column size in bytes.</param>
            <param name="encoding">The encoding of column's content bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is &lt; 1 or <paramref name="size"/> is &lt; 1.</exception>
        </member>
        <member name="M:NDbfReaderEx.Column.LoadValueAsObject(System.Byte[],System.Byte[]@)">
            <summary>
            Loads a value from the specified rowBuffer.
            </summary>
            <param name="rowBuffer">The byte array from which a value should be loaded.</param>
            <returns>A column value.</returns>
        </member>
        <member name="M:NDbfReaderEx.Column.IsNull(System.Byte[])">
            <summary>
            Is a value from the specified rowBuffer null.
            </summary>
            <param name="rowBuffer">The byte array from which a value should be loaded.</param>
            <returns></returns>
        </member>
        <member name="P:NDbfReaderEx.Column.name">
            <summary>
            Gets the column name.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.Column.offset">
            <summary>
            Gets the column offset in a row in bytes.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.Column.size">
            <summary>
            Gets the column size in bytes.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.Column.dec">
            <summary>
            Gets the number of decimal places in bytes/characters.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.Column.dbfType">
            <summary>
            Gets the <c>DBF</c> type of a column value.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.Column.displayWidth">
            <summary>
            Gets the width to display of a column value.
            If column type is memo, returns 0 because it is variable width.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.Column.leftSideDisplay">
            <summary>
            Better side to display of a column value.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.Column.type">
            <summary>
            Gets the <c>CLR</c> type of a column value.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.Column`1.#ctor(System.String,NDbfReaderEx.NativeColumnType,System.Int32,System.Int16,System.Int16,System.Text.Encoding)">
            <summary>
            Initializes a new instance with the specified name, offset and size.
            </summary>
            <param name="name">The colum name.</param>
            <param name="offset">The column offset in a row in bytes.</param>
            <param name="size">The column size in bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is &lt; 0 or <paramref name="size"/> is &lt; 0.</exception>
        </member>
        <member name="M:NDbfReaderEx.Column`1.LoadValue(System.Byte[],System.Byte[]@)">
            <summary>
            Loads a value from the specified rowBuffer.
            </summary>
            <param name="rowBuffer">The byte array from which a value should be loaded.</param>
            <returns>A column value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rowBuffer"/> is <c>null</c> or <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="rowBuffer"/> is smaller then the size of the column.</exception>
        </member>
        <member name="M:NDbfReaderEx.Column`1.LoadValueAsObject(System.Byte[],System.Byte[]@)">
            <summary>
            Loads a value from the specified rowBuffer.
            </summary>
            <param name="rowBuffer">The byte array from which a value should be loaded.</param>
            <returns>A column value.</returns>
        </member>
        <member name="M:NDbfReaderEx.Column`1.ValueFromRowBuffer(System.Byte[],System.Byte[]@)">
            <summary>
            Loads a value from the rowBuffer of row/record.
            </summary>
            <param name="rowBuffer">The byte array from which a value should be loaded. The rowBuffer length is always at least equal to the column size.</param>
            <returns>A column value.</returns>
        </member>
        <member name="P:NDbfReaderEx.Column`1.type">
            <summary>
            Gets the <c>CLR</c> type of column value.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.BooleanColumn.#ctor(System.String,NDbfReaderEx.NativeColumnType,System.Int32)">
            <summary>
            Initializes a new instance with the specified name and offset.
            </summary>
            <param name="name">The column name.</param>
            <param name="offset">The column offset in a row in bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is &lt; 0.</exception>
        </member>
        <member name="M:NDbfReaderEx.BooleanColumn.ValueFromRowBuffer(System.Byte[],System.Byte[]@)">
            <summary>
            Loads a value from the specified buffer.
            </summary>
            <param name="buffer">The byte array from which a value should be loaded. The buffer length is always at least equal to the column size.</param>
            <param name="encoding">The encoding that should be used when loading a value. The encoding is never <c>null</c>.</param>
            <returns>A column value.</returns>
        </member>
        <member name="M:NDbfReaderEx.BooleanColumn.IsNull(System.Byte[])">
            <summary>
            
            </summary>
            <param name="_buffer"></param>
            <returns></returns>
        </member>
        <member name="T:NDbfReaderEx.ClipperReader">
            <summary>
            Compatibility class for original NDbfReader class of eXavera
            </summary>
        </member>
        <member name="P:NDbfReaderEx.ClipperReader.eof">
            <summary>
            Content of actRow has valid?
            </summary>
        </member>
        <member name="P:NDbfReaderEx.ClipperReader.recNo">
            <summary>
            Get or set record number of DBF rows and set right content of actual row
            </summary>
        </member>
        <member name="P:NDbfReaderEx.ColumnDefinitionForCreateTable.name">
            <summary>
            Gets the column name.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.ColumnDefinitionForCreateTable.size">
            <summary>
            Gets the column size in bytes.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.ColumnDefinitionForCreateTable.dec">
            <summary>
            Gets the number of decimal places in bytes/characters.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.ColumnDefinitionForCreateTable.dbfType">
            <summary>
            Gets the <c>DBF</c> type of a column value.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.ColumnDefinitionForCreateTable.displayWidth">
            <summary>
            Gets the width to display of a column value.
            If column type is memo, returns 0 because it is variable width.
            </summary>
        </member>
        <member name="P:NDbfReaderEx.ColumnDefinitionForCreateTable.leftSideDisplay">
            <summary>
            Better side to display of a column value.
            </summary>
        </member>
        <member name="T:NDbfReaderEx.MemoColumn">
            <summary>
            Represents a <see cref="T:System.String"/> column.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.MemoColumn.#ctor(System.String,NDbfReaderEx.NativeColumnType,System.Int32,System.Int16,System.Int16,System.Text.Encoding)">
            <summary>
            Initializes a new instance with the specified name and offset.
            </summary>
            <param name="name">The column name.</param>
            <param name="offset">The column offset in a row in bytes.</param>
            <param name="size">The column size in bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is &lt; 0 or <paramref name="size"/> is &lt; 0.</exception>
        </member>
        <member name="F:NDbfReaderEx.MemoColumn.exceptionIfNoMemoStream">
            <summary>
            Program can control of usage
            </summary>
        </member>
        <member name="M:NDbfReaderEx.MemoColumn.ValueFromRowBuffer(System.Byte[],System.Byte[]@)">
            <summary>
            Loads a value from the specified buffer and seek real memo content from separated memo stream.
            </summary>
            <param name="buffer">The byte array from which a value should be loaded. The buffer length is always at least equal to the column size.</param>
            <param name="encoding">The encoding that should be used when loading a value. The encoding is never <c>null</c>.</param>
            <returns>A column text value, but null value signal if don't read from memo stream.</returns>
        </member>
        <member name="T:NDbfReaderEx.DateTimeColumn">
            <summary>
            Represents a <see cref="T:System.DateTime"/> column.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.DateTimeColumn.#ctor(System.String,NDbfReaderEx.NativeColumnType,System.Int32)">
            <summary>
            Initializes a new instance with the specified name and offset.
            </summary>
            <param name="name">The column name.</param>
            <param name="offset">The column offset in a row in bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is &lt; 0.</exception>
        </member>
        <member name="M:NDbfReaderEx.DateTimeColumn.ValueFromRowBuffer(System.Byte[],System.Byte[]@)">
            <summary>
            Loads a value from the specified buffer.
            </summary>
            <param name="buffer">The byte array from which a value should be loaded. The buffer length is always at least equal to the column size.</param>
            <param name="encoding">The encoding that should be used when loading a value. The encoding is never <c>null</c>.</param>
            <returns>A column value.</returns>
        </member>
        <member name="T:NDbfReaderEx.DbfRow">
            <summary>
            Represent one row of DBF file. It is readable in detached mode too.
            Content of record is modifiable, but you have to write back to DbfTable, when complet.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.#ctor(System.Int32,System.Byte[],NDbfReaderEx.IColumn[])">
            <summary>
            Contructor of row.
            </summary>
            <param name="recNo">No. of row in dbf file (first is 0)</param>
            <param name="buffer">bytes of entire record content</param>
            <param name="columns">DbfTable header information for detached mode</param>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetString(System.String)">
            <summary>
            Gets a <see cref="T:System.String"/> value of the specified column of the current row.
            </summary>
            <param name="columnName">The column name.</param>
            <returns>A <see cref="T:System.String"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="columnName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            No column with this name was found.<br/>
            -- or --<br/>
            The column has different type then <see cref="T:System.String"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetString(NDbfReaderEx.IColumn)">
            <summary>
            Gets a <see cref="T:System.String"/> value of the specified column of the current row.
            </summary>
            <param name="column">The column.</param>
            <returns>A <see cref="T:System.String"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="column"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The column has different type then <see cref="T:System.String"/>.<br/>
            -- or --<br/>
            The column is from different table instance.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetDecimal(System.String)">
            <summary>
            Gets a <see cref="T:System.Decimal"/> value of the specified column of the current row.
            </summary>
            <param name="columnName">The column name.</param>
            <returns>A <see cref="T:System.Decimal"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="columnName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            No column with this name was found.<br/>
            -- or --<br/>
            The column has different type then <see cref="T:System.Decimal"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetDecimal(NDbfReaderEx.IColumn)">
            <summary>
            Gets a <see cref="T:System.Decimal"/> value of the specified column of the current row.
            </summary>
            <param name="column">The column.</param>
            <returns>A <see cref="T:System.Decimal"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="column"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The column has different type then <see cref="T:System.Decimal"/>.<br/>
            -- or --<br/>
            The column is from different table instance.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetDate(System.String)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> value of the specified column of the current row.
            </summary>
            <param name="columnName">The column name.</param>
            <returns>A <see cref="T:System.DateTime"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="columnName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            No column with this name was found.<br/>
            -- or --<br/>
            The column has different type then <see cref="T:System.DateTime"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetDate(NDbfReaderEx.IColumn)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> value of the specified column of the current row.
            </summary>
            <param name="column">The column.</param>
            <returns>A <see cref="T:System.DateTime"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="column"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The column has different type then <see cref="T:System.DateTime"/>.<br/>
            -- or --<br/>
            The column is from different table instance.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetBoolean(System.String)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value of the specified column of the current row.
            </summary>
            <param name="columnName">The column name.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="columnName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            No column with this name was found.<br/>
            -- or --<br/>
            The column has different type then <see cref="T:System.Boolean"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetBoolean(NDbfReaderEx.IColumn)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value of the specified column of the current row.
            </summary>
            <param name="column">The column.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="column"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The column has different type then <see cref="T:System.Boolean"/>.<br/>
            -- or --<br/>
            The column is from different table instance.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetInt32(System.String)">
            <summary>
            Gets a <see cref="T:System.Int32"/> value of the specified column of the current row.
            </summary>
            <param name="columnName">The column name.</param>
            <returns>A <see cref="T:System.Int32"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="columnName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            No column with this name was found.<br/>
            -- or --<br/>
            The column has different type then <see cref="T:System.Int32"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetInt32(NDbfReaderEx.IColumn)">
            <summary>
            Gets a <see cref="T:System.Int32"/> value of the specified column of the current row.
            </summary>
            <param name="column">The column.</param>
            <returns>A <see cref="T:System.Int32"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="column"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The column has different type then <see cref="T:System.Int32"/>.<br/>
            -- or --<br/>
            The column is from different table instance.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetValue(System.String)">
            <summary>
            Gets a value of the specified column of the current row.
            </summary>
            <param name="columnName">The column name.</param>
            <returns>A column value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="columnName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The column is from different table instance.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetValue(NDbfReaderEx.IColumn)">
            <summary>
            Gets a value of the specified column of the current row.
            </summary>
            <param name="column">The column.</param>
            <returns>A column value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="column"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The column is from different table instance.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetValue``1(System.String)">
            <summary>
            Gets a value of the specified column of the current row.
            </summary>
            <typeparam name="T">The column type.</typeparam>
            <param name="columnName">The column name.</param>
            <returns>A column value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="columnName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The column is from different table instance.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetValue``1(NDbfReaderEx.IColumn)">
            <summary>
            Gets a value of the specified column of the current row.
            </summary>
            <typeparam name="T">The column type.</typeparam>
            <param name="column">The column.</param>
            <returns>A column value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="column"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The column is from different table instance.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No row is loaded. The <see cref="!:Read"/> method returned <c>false</c> or it has not been called yet.<br/>
            -- or --<br/>
            The underlying stream is non-seekable and columns are read out of order.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The parent table is disposed.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.CacheMemos">
            <summary>
            Store memos' content to cache for detached mode.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetRawString(System.String)">
            <summary>
            Raw data of field (mostly for debug or discovery of original DBF content)
            </summary>
            <param name="columnName">Name of column</param>
            <returns></returns>
        </member>
        <member name="M:NDbfReaderEx.DbfRow.GetRawString(NDbfReaderEx.IColumn)">
            <summary>
            Raw data of field (mostly for debug or discovery of original DBF content)
            </summary>
            <param name="column">Column definition</param>
            <returns></returns>
        </member>
        <member name="T:NDbfReaderEx.DbfTable">
            <summary>
            Represents a dBASE table.  Use one of the Open static methods to create a new instance.
            </summary>
            <example>
            <code>
            using(var table = new DbfTable.Open(@"D:\Example\table.dbf", Encoding.GetEncoding(437)))
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:NDbfReaderEx.DbfTable.Open(System.String,System.Text.Encoding,NDbfReaderEx.DbfTableType)">
            <summary>
            Opens a table from the specified file.
            </summary>
            <param name="path">The file to be opened.</param>
            <returns>A table instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.NotSupportedException">The dBASE table constains one or more columns of unsupported type.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfTable.Open(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Opens a table from the specified stream.
            </summary>
            <param name="stream">The stream of dBASE table to open. The stream is closed when the returned table instance is disposed.</param>
            <returns>A table instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c> or <paramref name="headerLoader"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not allow reading.</exception>
            <exception cref="T:System.NotSupportedException">The dBASE table constains one or more columns of unsupported type.</exception>
        </member>
        <member name="M:NDbfReaderEx.DbfTable.Create(System.String,System.Collections.Generic.IEnumerable{NDbfReaderEx.ColumnDefinitionForCreateTable},System.Text.Encoding,NDbfReaderEx.DbfTableType)">
            <summary>
            Create a new DBF datafile.
            Create() can't overwrite exists file - it's a precautionary measure.
            </summary>
            <param name="path">A not exists filename.</param>
            <param name="columns">Definition of columns</param>
            <param name="encoding">Encoding for open created file. -- It mean too, CodepageCodes of new file will OEM</param>
            <returns></returns>
        </member>
        <member name="M:NDbfReaderEx.DbfTable.Create(System.String,System.Collections.Generic.IEnumerable{NDbfReaderEx.ColumnDefinitionForCreateTable},NDbfReaderEx.DbfTable.CodepageCodes,NDbfReaderEx.DbfTableType)">
            <summary>
            Create a new DBF datafile.
            Create() can't overwrite exists file - it's a precautionary measure.
            </summary>
            <param name="path">A not exists filename.</param>
            <param name="columns">Definition of columns</param>
            <param name="codepageCode">Stored encoding information code, allways auto create appropriate encoding for open this file.</param>
            <returns></returns>
        </member>
        <member name="M:NDbfReaderEx.DbfTable.Dispose">
            <summary>
            Closes the underlying stream.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.DbfTable.Disposing">
            <summary>
            Releases the underlying stream.
            <remarks>
            The method is called only when the <see cref="M:NDbfReaderEx.DbfTable.Dispose"/> method is called for the first time.
            You MUST always call the base implementation.
            </remarks>
            </summary>
        </member>
        <member name="M:NDbfReaderEx.DbfTable.ThrowIfDisposed">
            <summary>
            Throws a <see cref="T:System.ObjectDisposedException"/> if the table is already disposed.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.DbfTable.OpenReader(System.Int32)">
            <summary>
            Compatibility behavior for original NDbfReader class of eXavera
            https://github.com/eXavera/NDbfReader
            </summary>
        </member>
        <member name="P:NDbfReaderEx.DbfTable.columns">
            <summary>
            Gets a list of all columns in the table.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The table is disposed.</exception>
        </member>
        <member name="P:NDbfReaderEx.DbfTable.recCount">
            <summary>
            Count of record/row of DBF table
            </summary>    
        </member>
        <!-- A helytelen alakú XML-megjegyzés figyelmen kívül hagyva a következő tagnál: „T:NDbfReaderEx.DbfTable.CodepageCodes” -->
        <member name="T:NDbfReaderEx.DbfTable.DbfFileTypes">
            <summary>
            http://www.dbf2002.com/dbf-file-format.html
            </summary>
        </member>
        <member name="T:NDbfReaderEx.DbfHeader">
            <summary>
            Header information of DBF file (without columns definition).
            </summary>
        </member>
        <member name="T:NDbfReaderEx.DecimalColumn">
            <summary>
            Represents a <see cref="T:System.Decimal"/> column.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.DecimalColumn.#ctor(System.String,NDbfReaderEx.NativeColumnType,System.Int32,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance with the specified name and offset.
            </summary>
            <param name="name">The column name.</param>
            <param name="offset">The column offset in a row in bytes.</param>
            <param name="size">The column size in bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is &lt; 0 or <paramref name="size"/> is &lt; 0.</exception>
        </member>
        <member name="M:NDbfReaderEx.DecimalColumn.ValueFromRowBuffer(System.Byte[],System.Byte[]@)">
            <summary>
            Loads a value from the specified buffer.
            </summary>
            <param name="buffer">The byte array from which a value should be loaded. The buffer length is always at least equal to the column size.</param>
            <returns>A column value.</returns>
        </member>
        <member name="T:NDbfReaderEx.Int32Column">
            <summary>
            Represents a <see cref="T:System.Int32"/> column.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.Int32Column.#ctor(System.String,NDbfReaderEx.NativeColumnType,System.Int32)">
            <summary>
            Initializes a new instance with the specified name and offset.
            </summary>
            <param name="name">The column name.</param>
            <param name="offset">The column offset in a row in bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is &lt; 0.</exception>
        </member>
        <member name="M:NDbfReaderEx.Int32Column.ValueFromRowBuffer(System.Byte[],System.Byte[]@)">
            <summary>
            Loads a value from the specified buffer.
            </summary>
            <param name="buffer">The byte array from which a value should be loaded. The buffer length is always at least equal to the column size.</param>
            <param name="encoding">The encoding that should be used when loading a value. The encoding is never <c>null</c>.</param>
            <returns>A column value.</returns>
        </member>
        <member name="M:NDbfReaderEx.MemoFileDBT.ReadMemoBytes(System.Int32)">
            <summary>
            Read content of memo field.
            (multithread calls enabled)
            </summary>
            <param name="blockNo">Pointer of first block in memo (DBT) file, readed from DBF's memo field.</param>
            <returns></returns>
        </member>
        <member name="P:NDbfReaderEx.MemoFileDBT.maxBlobSize">
            <summary>
            Maximum size of readed/writed blob text in bytes (default as dBase3/Clipper, 64K)
            </summary>
        </member>
        <member name="T:NDbfReaderEx.NativeColumnType">
            <summary>
            Supported native dBASE column types.
            </summary>
        </member>
        <member name="F:NDbfReaderEx.NativeColumnType.Char">
            <summary>
            Characters - padded with blanks to the width of the field. 
            </summary>
            <remarks>C in ASCII</remarks>
        </member>
        <member name="F:NDbfReaderEx.NativeColumnType.Memo">
            <summary>
            Memo (text blob) - stored separately in other datafile. 
            </summary>
            <remarks>M in ASCII</remarks>
        </member>
        <member name="F:NDbfReaderEx.NativeColumnType.Date">
            <summary>
            8 bytes - date stored as a string in the format YYYYMMDD.
            </summary>
            <remarks>D in ASCII</remarks>
        </member>
        <member name="F:NDbfReaderEx.NativeColumnType.Long">
            <summary>
            4 bytes. Leftmost bit used to indicate sign, 0 negative.
            </summary>
            <remarks> I in ASCII</remarks>
        </member>
        <member name="F:NDbfReaderEx.NativeColumnType.Logical">
            <summary>
            1 byte - initialized to 0x20 (space) otherwise T or F
            </summary>
            <remarks>L in ASCII</remarks>
        </member>
        <member name="F:NDbfReaderEx.NativeColumnType.Numeric">
            <summary>
            Number stored as a string, right justified, and padded with blanks to the width of the field. 
            </summary>
            <remarks>N in ASCII</remarks>
        </member>
        <member name="F:NDbfReaderEx.NativeColumnType.Float">
            <summary>
            Number stored as a string, right justified, and padded with blanks to the width of the field. 
            </summary>
            <remarks>F in ASCII</remarks>
        </member>
        <member name="T:NDbfReaderEx.Reader">
            <summary>
            Compatibility class for original NDbfReader class of eXavera
            https://github.com/eXavera/NDbfReader
            </summary>
        </member>
        <member name="T:NDbfReaderEx.StringColumn">
            <summary>
            Represents a <see cref="T:System.String"/> column.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.StringColumn.#ctor(System.String,NDbfReaderEx.NativeColumnType,System.Int32,System.Int16,System.Int16,System.Text.Encoding)">
            <summary>
            Initializes a new instance with the specified name and offset.
            </summary>
            <param name="name">The column name.</param>
            <param name="offset">The column offset in a row in bytes.</param>
            <param name="size">The column size in bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is &lt; 0 or <paramref name="size"/> is &lt; 0.</exception>
        </member>
        <member name="M:NDbfReaderEx.StringColumn.ValueFromRowBuffer(System.Byte[],System.Byte[]@)">
            <summary>
            Loads a value from the specified buffer.
            </summary>
            <param name="buffer">The byte array from which a value should be loaded. The buffer length is always at least equal to the column size.</param>
            <param name="encoding">The encoding that should be used when loading a value. The encoding is never <c>null</c>.</param>
            <returns>A column value.</returns>
        </member>
        <member name="T:NDbfReaderEx.TableExtensions">
            <summary>
            Extensions for for the <see cref="T:NDbfReaderEx.DbfTable"/> class.
            </summary>
        </member>
        <member name="M:NDbfReaderEx.TableExtensions.AsDataTable(NDbfReaderEx.DbfTable)">
            <summary>
            Loads the DBF table into a <see cref="T:System.Data.DataTable"/> with the default ASCII encoding.
            </summary>
            <param name="table">The DBF table to load.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> loaded from the DBF table.</returns>
            <exception cref="T:System.InvalidOperationException">Another reader of the DBF table is opened.</exception>
            <exception cref="T:System.ObjectDisposedException">The DBF table is disposed.</exception>
        </member>
    </members>
</doc>
